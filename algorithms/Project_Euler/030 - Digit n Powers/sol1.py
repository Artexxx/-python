"""

Удивительно, но существует только три числа, которые могут быть записаны в виде суммы четвертых степеней их цифр:

1634 = 1^4 + 6^4 + 3^4 + 4^4
8208 = 8^4 + 2^4 + 0^4 + 8^4
9474 = 9^4 + 4^4 + 7^4 + 4^4
As 1 = 1^4 is not a sum it is not included.

Сумма этих чисел равна 1634 + 8208 + 9474 = 19316.

Найдите сумму всех чисел, которые могут быть записаны в виде суммы пятых степеней их цифр.


(9^5)=59_049 => 59049*7=413_343 (это всего лишь 6-значное число 999_999)
Таким образом, число, превышающее 999_999, отклоняется
а также 59049*3=1_77_147 (что превышает критерии числа, являющегося 3-значным)
Итак, n>999 и n<999_999, следовательно, граница равна (1000,1000000)
"""


def is_digit_sum(s: str) -> int:
    """
    Проверяет можетли число S записано в виде суммы пятых степеней его цифр:
    [*] Возращает 0 или S

    >>> is_digit_sum('4150')
    4150 #=> [1024, 1, 3125, 0]
    >>> is_digit_sum('4151')
    4151 #=> [1024, 1, 3125, 1]
    """
    i = sum(pow(int(c), 5) for c in s)
    return i if i == int(s) else 0


def solution():
    """
    Находит сумму всех чисел, которые могут быть записаны в виде суммы пятых степеней их цифр.

    >>> solution()
    443839 #=> 4150,4151,54748,92727,93084,194979
    """
    count = sum(is_digit_sum(str(i)) for i in range(1000, 1000000))
    return count


if __name__ == "__main__":
    print(solution())
