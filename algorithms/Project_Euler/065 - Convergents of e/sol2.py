"""
Квадратный корень из 2 можно записать в виде бесконечной непрерывной дроби.

    √2 = 1 +  1
            ──────────────
            2 +  1
               ───────────
               2 +  1
                  ────────
                  2 +  1
                    ──────
                    2 +  1

Бесконечную непрерывную дробь можно записать, воспользовавшись обозначением √2 = [1;(2)], где (2) указывает на то, что 2 повторяется до бесконечности.
Подобным образом, √23 = [4;(1,3,1,8)].

Оказывается, что последовательность частичных значений непрерывных дробей предоставляет наилучшую рациональную аппроксимацию квадратного корня.
Рассмотрим приближения √2.

    1 + (1 / 2) = 3/2
    1 + (1 / (2 + (1 / 2)))=7/5
    1 + (1 / (2 + (1 / (2 + 1 / 2))))=17/1
    1 + (1 / (2 + (1 / (2 + (1 / (2 + 1 / 2))))))=41/29

Таким образом, последовательность первых десяти приближений для √2 имеет вид:

    1, 3/2, 7/5, 17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, ...

Самое удивительное, что важная математическая константа

    e = [2; 1,2,1, 1,4,1, 1,6,1 , ... , 1,2k,1, ...].

Первые десять членов последовательности приближений для e перечислены ниже:

    2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457/536, ...

Сумма цифр числителя 10-го приближения равна 1 + 4 + 5 + 7 = 17.

Найдите сумму цифр числителя 100-го приближения непрерывной дроби для e.

  №      Время  Замедление      Аргумент    Результат
---  ---------  ------------  ----------  -----------
  1  0.0008369  0.084%               100          272
  2  0.0310575  3.022%              1000         4034
"""
import itertools
from fractions import Fraction


def e_generator():
    yield 2
    for k in itertools.count(start=1):
        yield 1
        yield k * 2
        yield 1


def continued(e_generator, n_iterations) -> Fraction:
    """
    Возвращает N-е приближение непрерывной дроби для e.

    >>> continued(e_generator(), 3)
    Fraction(8, 3)
    >>> continued(e_generator(), 4)
    Fraction(11, 4)
    >>> continued(e_generator(), 10)
    Fraction(1457, 536)
    """
    fraction_number = next(e_generator)
    if n_iterations == 1:
        return Fraction(fraction_number)
    else:
        return Fraction(fraction_number) + Fraction(1, continued(e_generator, n_iterations - 1))


def solution(N):
    """
    Возвращает сумму цифр числителя N-го приближения непрерывной дроби для e.

    >>> solution(10)
    17
    """
    numerator = continued(e_generator(), N).numerator
    return sum(map(int, str(numerator)))


if __name__ == '__main__':
    ### Run Time-Profile Table ###
    import sys; sys.path.append('..')
    from time_profile import TimeProfile;
    TimeProfile(solution, [100, 1000])

