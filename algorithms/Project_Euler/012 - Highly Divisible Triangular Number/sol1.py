"""
Последовательность треугольных чисел образуется путем сложения натуральных чисел.
К примеру, 7-ое треугольное число равно 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

Первые десять треугольных чисел: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Перечислим делители первых семи треугольных чисел:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
Как мы видим, 28 - первое треугольное число, у которого более пяти делителей.

Каково первое треугольное число, у которого более N делителей?


  №      Время  Замедление      Число    Результат
---  ---------  ------------  -------  -----------
  1  0.0010739  0.107%             50        25200
  2  0.0889911  8.79%             250      2162160
  3  2.97749    288.85%           500     76576500
"""
import itertools, math


def triangle_number_generator():
    for n in itertools.count(1):
        yield n * (n + 1) // 2  # 1 + 2 + ... + i = i * (i + 1) / 2

# Old Method!!!
# def count_divisors(n):
#     count = 0
#     for i in range(1, int(math.sqrt(n)) + 1):
#         if n % i == 0:
#             count += 1
#             if n / i != i:
#               count += 1
#     return count


def count_divisors(n):
    """
    Начинаем с 1 до квадратного корня из треугольного числа.
    Нам не нужно выходить за этот порог по очень простой причине:
      когда число делится на i, оно также делится на число, которое мы получаем, деля число на i.
    Пример 28: обнаруживая делимость на 2, мы можем немедленно найти другой множитель 14 (28/2) .

    [i * i != n] = [n/i != i]

    Разложить число на множители можно так:
        [i, n//i] for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)
    """
    return sum((2 for i in range(1, int(math.sqrt(n)) + 1)
                if n % i == 0 and i * i != n))


def solution(n):
    """Возвращает значение первого треугольного числа, имеющего более N делители.

    >>> solution(5)
    28
    >>> solution(500)
    76576500
    """
    return next(i for i in triangle_number_generator() if count_divisors(i) > n)


if __name__ == "__main__":
    print(solution(int(input())))
    # ### Run Time-Profile Table ###
    # import sys; sys.path.append('..')
    # from time_profile import my_time_this
    # my_time_this(solution, [50, 250, 500])
